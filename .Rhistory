shiny::runApp()
getwd()
runApp()
runApp()
runApp()
source("volcano.R")
tsv <- list.files("data/", pattern = ".tsv", full.names = TRUE)
csv <- list.files("data/", pattern = ".csv", full.names = TRUE)
txt <- list.files("data/", pattern = ".txt", full.names = TRUE)
if(length(tsv) > 0) {
data <- read.table(tsv, header = TRUE, sep = "\t")
}
if(length(csv) > 0) {
data <- read.table(csv, header = TRUE, sep = ",")
}
if(length(txt) > 0) {
data <- fread(txt)
}
data <- as.data.frame(data)
View(data)
pvalue_candidate_f <- function(x) {
if (class(data[[x]]) == "numeric") {
if (max(data[[x]], na.rm = TRUE) <= 1) {
if (min(data[[x]], na.rm = TRUE) >= 0) {
return(TRUE)
}
}
}
return(FALSE)
}
logfc_candidate_f <- function(x) {
if (class(data[[x]]) == "numeric") {
return(TRUE)}
return(FALSE)
}
gene_candidate_f <- function(x) {
if (class(data[[x]]) == "character") {
return(TRUE)}
return(FALSE)
}
pval_cols <- names(data)[sapply(names(data), pvalue_candidate_f)]
logfc_cols <- names(data)[sapply(names(data), logfc_candidate_f)]
gene_cols <- names(data)[sapply(names(data), gene_candidate_f)]
runApp()
rm(list = ls())
runApp('~/Desktop/Shiny')
DEGs <- read.table("./data/diffex_out.csv", header = T, row.names = 1)
setwd("../Shiny/")
DEGs <- read.table("./data/diffex_out.csv", header = T, row.names = 1)
View(DEGs)
DEGs <- read.table("./data/diffex_out.csv", header = T, row.names = 1, sep = ",")
View(DEGs)
DEGs <- read.table("./data/diffex_out.csv", header = T, sep = ",")
View(DEGs)
class(DEGs)
runApp()
runApp()
runApp()
# functions
pvalue_candidate_f <- function(x) {
if (class(data[[x]]) == "numeric") {
if (max(data[[x]], na.rm = TRUE) <= 1) {
if (min(data[[x]], na.rm = TRUE) >= 0) {
return(TRUE)
}
}
}
return(FALSE)
}
logfc_candidate_f <- function(x) {
if (class(data[[x]]) == "numeric") {
return(TRUE)}
return(FALSE)
}
gene_candidate_f <- function(x) {
if (class(data[[x]]) == "character") {
return(TRUE)}
return(FALSE)
}
# check data columns to ID most likely candidates for pval, logfc, and gene ID
pval_cols <- names(DEGs)[sapply(names(DEGs), pvalue_candidate_f)]
names(DEGs)[sapply(names(DEGs), pvalue_candidate_f)]
pvalue_candidate_f(DEGs)
class(data[[DEGs]])
DEGS <- as.data.frame(DEGs)
# check data columns to ID most likely candidates for pval, logfc, and gene ID
pval_cols <- names(DEGs)[sapply(names(DEGs), pvalue_candidate_f)]
data <- read.table("data/diffex_out.csv", header = TRUE, sep = ",")
View(data)
# check data columns to ID most likely candidates for pval, logfc, and gene ID
pval_cols <- names(data)[sapply(names(data), pvalue_candidate_f)]
DEGS <- read.table("data/diffex_out.csv", header = TRUE, sep = ",")
# functions
pvalue_candidate_f <- function(x) {
if (class(data[[x]]) == "numeric") {
if (max(data[[x]], na.rm = TRUE) <= 1) {
if (min(data[[x]], na.rm = TRUE) >= 0) {
return(TRUE)
}
}
}
return(FALSE)
}
logfc_candidate_f <- function(x) {
if (class(data[[x]]) == "numeric") {
return(TRUE)}
return(FALSE)
}
gene_candidate_f <- function(x) {
if (class(data[[x]]) == "character") {
return(TRUE)}
return(FALSE)
}
# check data columns to ID most likely candidates for pval, logfc, and gene ID
pval_cols <- names(data)[sapply(names(data), pvalue_candidate_f)]
logfc_cols <- names(DEGs)[sapply(names(DEGs), logfc_candidate_f)]
gene_cols <- names(DEGs)[sapply(names(DEGs), gene_candidate_f)]
DEGs <- read.table("./data/diffex_out.csv", header = T, sep = ",")
# check data columns to ID most likely candidates for pval, logfc, and gene ID
pval_cols <- names(DEGs)[sapply(names(DEGs), pvalue_candidate_f)]
logfc_cols <- names(DEGs)[sapply(names(DEGs), logfc_candidate_f)]
gene_cols <- names(DEGs)[sapply(names(DEGs), gene_candidate_f)]
runApp()
names(pval_cols)
pval_cols
pval_cols
names(pca_sig.data[,1:5])
counts_liver <- read.table("./data/normalizedcounts.tsv", header = T, row.names = 1)
pca_data<-prcomp(t(counts_liver), scale=T)
summary(pca_data)
pca_sig.var<-pca_data$sdev^2
pca_sig.var.per<-round(pca_sig.var/sum(pca_sig.var)*100, 1)
pca_sig.data<-data.frame(Sample=rownames(pca_data$x), PC1=pca_data$x[,1], PC2=pca_data$x[,2], PC3=pca_data$x[,3], PC4=pca_data$x[,4], PC5=pca_data$x[,5])
pca_sig.data<-pca_sig.data[-1]
names(pca_sig.data[,1:5])
runApp()
View(DEGs)
runApp()
runApp()
library(EnhancedVolcano)
volcano_plot <- EnhancedVolcano(toptable = DEGs,lab = rownames(DEGs),
x = "log2FoldChange",y = "padj",pCutoff = 0.05,FCcutoff = 0.7,
ylim = , xlim = range(DEGs$log2FoldChange), selectLab = rownames(selected_labs),
drawConnectors = TRUE,widthConnectors = 0.5,typeConnectors = ,
endsConnectors = 'first',labSize = 4,gridlines.minor = F,gridlines.major = F
,pointSize = 3,colAlpha = 0.5, title = "Volcano plot (Fibrosis vs No fibrosis)",
subtitle = "Adj p-value cutoff (dashed line): p<0.05
Log2 FC cutoff (dashed line): 0.7",colCustom = keyvals,
labFace = "italic",boxedLabels = TRUE, max.overlaps = Inf)
volcano_plot <- EnhancedVolcano(toptable = DEGs,lab = rownames(DEGs),
x = "log2FoldChange",y = "padj",pCutoff = 0.05,FCcutoff = 0.7,
ylim = , xlim = range(DEGs$log2FoldChange), #selectLab = rownames(selected_labs),
drawConnectors = TRUE,widthConnectors = 0.5,typeConnectors = ,
endsConnectors = 'first',labSize = 4,gridlines.minor = F,gridlines.major = F
,pointSize = 3,colAlpha = 0.5, title = "Volcano plot (Fibrosis vs No fibrosis)",
subtitle = "Adj p-value cutoff (dashed line): p<0.05
Log2 FC cutoff (dashed line): 0.7",colCustom = keyvals,
labFace = "italic",boxedLabels = TRUE, max.overlaps = Inf)
keyvals <- ifelse(
DEGs$log2FoldChange < -0.7 & DEGs$padj < 0.05, "navy",
ifelse(DEGs$log2FoldChange  > 0.7 & DEGs$padj < 0.05,"#D82632",
"grey"))
names(keyvals)[keyvals == "navy"] <- "Downregulated"
names(keyvals)[keyvals == "#D82632"] <- "Upregulated"
names(keyvals)[keyvals == "grey"] <- "NS"
volcano_plot <- EnhancedVolcano(toptable = DEGs,lab = rownames(DEGs),
x = "log2FoldChange",y = "padj",pCutoff = 0.05,FCcutoff = 0.7,
ylim = , xlim = range(DEGs$log2FoldChange), #selectLab = rownames(selected_labs),
drawConnectors = TRUE,widthConnectors = 0.5,typeConnectors = ,
endsConnectors = 'first',labSize = 4,gridlines.minor = F,gridlines.major = F
,pointSize = 3,colAlpha = 0.5, title = "Volcano plot (Fibrosis vs No fibrosis)",
subtitle = "Adj p-value cutoff (dashed line): p<0.05
Log2 FC cutoff (dashed line): 0.7",colCustom = keyvals,
labFace = "italic",boxedLabels = TRUE, max.overlaps = Inf)
ggplot(volcano_plot)
shiny::runApp()
runApp()
DEGs <- read.table("./data/diffex_out.csv", header = T, sep = ",")
DEGS <- as.data.frame(DEGs)
# functions
pvalue_candidate_f <- function(x) {
if (class(data[[x]]) == "numeric") {
if (max(data[[x]], na.rm = TRUE) <= 1) {
if (min(data[[x]], na.rm = TRUE) >= 0) {
return(TRUE)
}
}
}
return(FALSE)
}
gene_candidate_f <- function(x) {
if (class(data[[x]]) == "character") {
return(TRUE)}
return(FALSE)
}
# check data columns to ID most likely candidates for pval, logfc, and gene ID
pval_cols <- names(DEGs)[sapply(names(DEGs), pvalue_candidate_f)]
logfc_cols <- names(DEGs[,2:5])
gene_cols <- names(DEGs)[sapply(names(DEGs), gene_candidate_f)]
DEGs <- read.table("./data/diffex_out.csv", header = T, sep = ",")
# functions
pvalue_candidate_f <- function(x) {
if (class(data[[x]]) == "numeric") {
if (max(data[[x]], na.rm = TRUE) <= 1) {
if (min(data[[x]], na.rm = TRUE) >= 0) {
return(TRUE)
}
}
}
return(FALSE)
}
gene_candidate_f <- function(x) {
if (class(data[[x]]) == "character") {
return(TRUE)}
return(FALSE)
}
# check data columns to ID most likely candidates for pval, logfc, and gene ID
pval_cols <- names(DEGs)[sapply(names(DEGs), pvalue_candidate_f)]
logfc_cols <- names(DEGs[,2:5])
gene_cols <- names(DEGs)[sapply(names(DEGs), gene_candidate_f)]
sapply(names(DEGs), pvalue_candidate_f)
DEGs
DEGs <- as.data.frame(DEGs)
# check data columns to ID most likely candidates for pval, logfc, and gene ID
pval_cols <- names(DEGs)[sapply(names(DEGs), pvalue_candidate_f)]
logfc_cols <- names(DEGs[,2:5])
gene_cols <- names(DEGs)[sapply(names(DEGs), gene_candidate_f)]
View(DEGS)
View(DEGs)
View(DEGS)
data <- read.table("./data/diffex_out.csv", header = TRUE, sep = ",")
runApp()
runApp('~/Desktop/interactiveVolcano')
runApp('~/Desktop/interactiveVolcano')
runApp()
runApp()
